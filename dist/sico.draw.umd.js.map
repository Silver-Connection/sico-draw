{"version":3,"file":"sico.draw.umd.js","sources":["../src/main.ts","../src/gauge/lib.ts"],"sourcesContent":["import { IGaugeConfig, IGaugeData, LabelFunction } from \"./gauge/interface\";\nimport { Gauge } from \"./gauge/lib\";\n\nexport { IGaugeConfig, IGaugeData, LabelFunction } from \"./gauge/interface\";\nexport default {\n    Gauge: Gauge\n};","import { IGaugeConfig, IGaugeData } from \"./interface\";\n\ndeclare var G_vmlCanvasManager: any;\n\nexport class Gauge {\n    public static degToRands(value?: number): number {\n        if (value === undefined) {\n            return Math.PI / 180;\n        }\n        return value * Math.PI / 180;\n    }\n\n    public static percentToRands(value?: number, max?: number): number {\n        if (value === undefined || max === undefined) {\n            return Math.PI / 180;\n        }\n        return value * max / 100 * Math.PI / 180;\n    }\n\n    public options!: IGaugeConfig;\n    public el!: HTMLElement;\n    public elLabels!: JQuery<HTMLElement>;\n    public canvas!: HTMLCanvasElement;\n    public context!: CanvasRenderingContext2D;\n\n    protected default: IGaugeConfig =\n        {\n            autoDraw: true,\n            backgroundColor: \"#E3DBCB\",\n            backgroundShow: true,\n            canvasHeight: 300,\n            canvasWidth: 600,\n            centerX: \"center\",\n            centerY: \"center\",\n            data: undefined,\n            deg: 180,\n            lineCap: \"butt\",\n            labelInverse: false,\n            labelHtml: false,\n            labelHtmlUseCanvasSize: false,\n            labelCssBase: undefined,\n            offset: 180,\n            scale: false,\n            scaleUp: false,\n        };\n\n    protected defaultData: IGaugeData =\n        {\n            color: \"#0382A0\",\n            label: undefined,\n            labelCss: undefined,\n            labelColor: \"#727272\",\n            labelFont: \"sans-serif\",\n            labelShow: true,\n            labelSize: 20,\n            labelStyle: \"normal normal bold\",\n            size: 10,\n            value: 0,\n        };\n\n    private centerXFactor: number = 0.5;\n    private centerYFactor: number = 0.5;\n    private gaugeSize: number = 0;\n    private labelSize: number = 0;\n\n    constructor(element: HTMLElement | JQuery<HTMLElement>, opt: IGaugeConfig) {\n        // Wrapper\n        if (element === null || element === undefined) {\n            // tslint:disable-next-line:no-console\n            console.log(\"Could not find wrapper element\");\n            return;\n        }\n\n        if (element instanceof HTMLElement) {\n            this.el = element;\n        } else {\n            this.el = element[0];\n        }\n\n        // Configs\n        this.options = $.extend(true, this.default, opt);\n        this.checkData();\n        let flexX = \"center\";\n        if (this.options.centerX === \"left\") {\n            this.centerXFactor = 0;\n            flexX = \"flex-start\";\n        } else if (this.options.centerX === \"right\") {\n            this.centerXFactor = 1;\n            flexX = \"flex-end\";\n        } else {\n            this.centerXFactor = 0.5;\n        }\n\n        let flexY = \"center\";\n        if (this.options.centerY === \"top\") {\n            this.centerYFactor = 0;\n            flexY = \"flex-start\";\n        } else if (this.options.centerY === \"bottom\") {\n            this.centerYFactor = 1;\n            flexY = \"flex-end\";\n        } else {\n            this.centerYFactor = 0.5;\n        }\n\n        // HTML Labels\n        if (this.options.labelHtml) {\n\n            this.elLabels = $(\"<div></div)\");\n            this.elLabels.css({\n                \"position\": \"absolute\",\n                \"top\": 0,\n                \"left\": 0,\n                \"height\": this.options.labelHtmlUseCanvasSize ? this.options.canvasHeight : \"100%\",\n                \"width\": this.options.labelHtmlUseCanvasSize ? this.options.canvasWidth : \"100%\",\n                \"display\": \"flex\",\n                \"flex-direction\": \"column\",\n                \"justify-content\": flexY,\n                \"align-items\": flexX,\n            });\n\n            $(this.el).css({\n                \"position\": \"relative\",\n            }).append(this.elLabels);\n        }\n\n        // Create and draw Canvas\n        this.createCanvas();\n        if (this.options.autoDraw) {\n            this.$draw();\n        }\n    }\n\n    public createCanvas() {\n        this.canvas = document.createElement(\"canvas\");\n        this.el.appendChild(this.canvas);\n\n        if (typeof (G_vmlCanvasManager) === \"object\") {\n            G_vmlCanvasManager.initElement(this.canvas);\n        }\n\n        this.canvas.height = this.options.canvasHeight;\n        this.canvas.width = this.options.canvasWidth;\n        const c = this.canvas.getContext(\"2d\");\n        if (c !== null) {\n            this.context = c;\n        }\n\n        let scaleBy = 1;\n        if (this.options.scale && window.devicePixelRatio > 1) {\n            scaleBy = window.devicePixelRatio;\n            if (!this.options.scaleUp) {\n                scaleBy = 1 / window.devicePixelRatio;\n            }\n\n            this.canvas.width = this.canvas.width * scaleBy;\n            this.canvas.height = this.canvas.height * scaleBy;\n            this.context.scale(scaleBy, scaleBy);\n        }\n\n        // Clear\n        // this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    public $draw() {\n        // Draw background\n        if (this.options.backgroundShow) {\n            this.drawBackground();\n        }\n\n        // Draw data lines\n        if (this.options != undefined\n            && this.options.data != undefined\n            && this.options.data.length > 0) {\n            let offsetLine = 0;\n            let offsetText = this.options.labelHtml ? 0 : 1;\n            for (const data of this.options.data) {\n                this.drawGauge(data, offsetLine);\n                offsetLine += data.size!;\n            }\n\n            const ll = this.options.labelInverse ? this.options.data.reverse() : this.options.data;\n            for (const data of ll) {\n                if (data.labelShow) {\n                    if (!this.options.labelHtml) {\n                        this.drawText(data, offsetText);\n                        offsetText += (data.labelSize || 0) + 10;\n                    } else {\n                        this.htmlText(data);\n                    }\n                }\n            }\n        }\n    }\n\n    public drawBackground() {\n        const rands = Gauge.degToRands(this.options.deg);\n        this.drawLine(rands, this.gaugeSize, this.options.backgroundColor!, 0);\n    }\n\n    public drawGauge(data: IGaugeData, offset: number = 0) {\n        const rands = Gauge.percentToRands(data.value, this.options.deg);\n        this.drawLine(rands, data.size!, data.color!, offset);\n    }\n\n    public drawLine(rands: number, size: number, color: string, offset: number = 0) {\n        // Arc\n        const center = this.getCenterPoint();\n        let radius = (this.canvas.width / 2) - (size / 2) - offset;\n        if (this.canvas.width < this.canvas.height) {\n            radius = (this.canvas.height / 2) - (size / 2) - offset;\n        }\n\n        this.context.beginPath();\n        this.context.arc(center.x, center.y, radius, Gauge.degToRands(this.options.offset), rands + Gauge.degToRands(this.options.offset), false);\n        this.context.strokeStyle = color;\n        this.context.lineWidth = size;\n        this.context.lineCap = this.options.lineCap!;\n        this.context.stroke();\n        this.context.closePath();\n    }\n\n    public drawText(data: IGaugeData, offset: number) {\n        const center = this.getCenterPoint();\n        const font = (data.labelStyle + \" \" + data.labelSize + \"px \" + data.labelFont).trim();\n\n        let label = \"\";\n        if (typeof data.label === \"function\") {\n            label = data.label(data.value);\n        } else {\n            label = data.label || \"\";\n        }\n\n        this.context.textAlign = this.options.centerX || this.default.centerX!;\n        this.context.font = font;\n\n        let y = center.y - offset;\n        if (this.options.centerY === \"center\") {\n            y = center.y - offset + this.labelSize / 2;\n        } else if (this.options.centerY === \"top\") {\n            y = offset + this.labelSize / 2;\n        }\n\n        this.context.fillStyle = data.labelColor!;\n        this.context.fillText(label, center.x, y);\n    }\n\n    public htmlText(data: IGaugeData) {\n        let label = \"\";\n        if (typeof data.label === \"function\") {\n            label = data.label(data.value);\n        } else {\n            label = data.label || \"\";\n        }\n\n        let css = this.options.labelCssBase!;\n        if (data.labelCss) {\n            css += \" \" + data.labelCss;\n        }\n\n        this.elLabels.append('<span class=\"' + css + '\">' + label + \"</span>\");\n    }\n\n    private getCenterPoint() {\n        return {\n            x: this.canvas.width * this.centerXFactor,\n            y: this.canvas.height * this.centerYFactor,\n        };\n    }\n\n    private checkData() {\n        if (this.options != undefined && this.options.data != undefined && this.options.data.length > 0) {\n            for (let i = 0; i < this.options.data.length; i++) {\n                this.options.data[i] = $.extend(true, {}, this.defaultData, this.options.data[i]);\n                if (this.options.data[i].label === undefined) {\n                    this.options.data[i].label = this.options.data[i].value + \"%\";\n                }\n\n                // Total size\n                this.gaugeSize += this.options.data[i].size!;\n                this.labelSize += this.options.data[i].labelSize!;\n            }\n        }\n    }\n}"],"names":["Gauge","element","opt","this","autoDraw","backgroundColor","backgroundShow","canvasHeight","canvasWidth","centerX","centerY","data","undefined","deg","lineCap","labelInverse","labelHtml","labelHtmlUseCanvasSize","labelCssBase","offset","scale","scaleUp","color","label","labelCss","labelColor","labelFont","labelShow","labelSize","labelStyle","size","value","HTMLElement","el","options","$","extend","default","checkData","flexX","centerXFactor","flexY","centerYFactor","elLabels","css","position","top","left","height","width","display","flex-direction","justify-content","align-items","append","createCanvas","$draw","console","log","Math","PI","max","canvas","document","createElement","appendChild","G_vmlCanvasManager","initElement","c","getContext","context","scaleBy","window","devicePixelRatio","drawBackground","length","offsetLine","offsetText","_a","_i","drawGauge","ll_1","reverse","_b","htmlText","drawText","rands","degToRands","drawLine","gaugeSize","percentToRands","center","getCenterPoint","radius","beginPath","arc","x","y","strokeStyle","lineWidth","stroke","closePath","font","trim","textAlign","fillStyle","fillText","i","defaultData"],"mappings":"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"}